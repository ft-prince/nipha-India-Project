class ProductMedia(models.Model):
    product = models.ForeignKey(Product, related_name='media', on_delete=models.CASCADE)
    file = models.FileField(
        upload_to='product_media/',
        validators=[FileExtensionValidator(allowed_extensions=['pdf', 'mp4', 'mov', 'zip'])]
    )
    duration = models.PositiveIntegerField(default=15, blank=True, help_text="Duration in seconds (for videos)")
    station = models.ForeignKey(Station, on_delete=models.CASCADE, blank=True, null=True)
    is_selected = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return f"{self.product.code} - {self.file.name}"

    def save(self, *args, **kwargs):
        if self.file.name.endswith('.zip'):
            with zipfile.ZipFile(self.file) as zip_file:
                for filename in zip_file.namelist():
                    name, extension = os.path.splitext(filename)
                    if extension.lower() in ['.pdf', '.mp4', '.mov']:
                        file_content = zip_file.read(filename)
                        content_file = ContentFile(file_content)
                        new_media = ProductMedia(
                            product=self.product,
                            station=self.station,
                            is_selected=self.is_selected,
                            is_active=self.is_active
                        )
                        new_media.file.save(filename, content_file, save=False)
                        new_media.save()
            self.file.delete(save=False)
            return
        super().save(*args, **kwargs)


